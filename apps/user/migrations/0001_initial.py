# Generated by Django 4.2.1 on 2023-07-06 12:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(help_text='Provide a Valid Email Address', max_length=254, unique=True, verbose_name='Email Address')),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('is_staff', models.BooleanField(default=False, help_text="Designates whether the user can has teacher's/staff's Priviledges.", verbose_name='staff status')),
                ('member_type', models.CharField(blank=True, choices=[('AGENT', 'AGENT'), ('MANAGER', 'MANAGER')], max_length=100, verbose_name='PLATFORM ROLE')),
                ('is_owner', models.BooleanField(default=False, help_text='Designates whether User is a School Owner', verbose_name='Owner Validity')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date Joined')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='Last Login Date')),
                ('verified', models.BooleanField(default=False, help_text="Designates whether this user's email has been Verified. ", verbose_name='email_verify')),
                ('on_boarding_complete', models.BooleanField(default=False, help_text='Flag to determine if customer has completed onboarding process.', verbose_name='Completed Onboarding')),
                ('on_boarding_complete_date', models.DateTimeField(blank=True, help_text='Timestamp when customer completed onboarding process.', null=True, verbose_name='Onboarding Complete Date')),
                ('kyc_submitted', models.BooleanField(default=False, help_text='Flag to determine if customer has submitted a KYC Verification.', verbose_name='KYC Submitted')),
                ('social_security_number', models.CharField(blank=True, help_text='The social security number of the customer. This helps to determine the credit score and also validates the identity of the customer.', max_length=50, null=True, verbose_name='Social Security Number')),
                ('place_of_birth', models.CharField(blank=True, help_text='The place of birth of the customer. This must match the place of birth as indicated in the customers photo Identitication.', max_length=150, null=True, verbose_name='Place of Birth')),
                ('verification_date', models.DateTimeField(blank=True, default=django.utils.timezone.now, editable=False, help_text='Timestamp when customers profile was verified.', null=True, verbose_name='Verification Date')),
                ('registered_ip_address', models.GenericIPAddressField(blank=True, editable=False, help_text='The IP address recorded at the time of registration.', null=True, verbose_name='Registered IP Address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(blank=True, db_index=True, max_length=40, null=True)),
                ('login', models.DateTimeField(auto_now_add=True)),
                ('logout', models.DateTimeField(default=None, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('login_attempts', models.IntegerField(default=0)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
